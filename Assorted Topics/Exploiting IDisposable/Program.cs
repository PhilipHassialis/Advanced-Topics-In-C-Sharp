
using System;
using System.Diagnostics;
using System.Threading;

namespace Exploiting_IDisposable
{
    public class MyClass : IDisposable
    {
        public MyClass()
        {
            System.Console.WriteLine("Hello");
        }

        public void Dispose()
        {
            System.Console.WriteLine("Goodbye");
        }
    }

    public class SimpleTimer : IDisposable
    {
        private readonly Stopwatch st;
        public SimpleTimer()
        {
            st = new Stopwatch();
            st.Start();
        }

        public void Dispose()
        {
            st.Stop();
            System.Console.WriteLine($"Milliseconds elapsed {st.ElapsedMilliseconds}");
        }
    }

    public class Disposable : IDisposable
    {
        private readonly Action end;

        public Disposable(Action start, Action end)
        {
            this.end = end;
            start();
        }

        public void Dispose()
        {
            end();
        }

        public static Disposable Create(Action start, Action end)
        {
            return new Disposable(start, end);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            //using (new MyClass()) { }
            //using (new SimpleTimer())
            //{
            //    Thread.Sleep(1000);
            //}

            var st = new Stopwatch();
            using (Disposable.Create(()=>st.Start(), () => st.Stop()))
            {
                Console.WriteLine("Something here...");
                Thread.Sleep(1000);
            }
            Console.WriteLine(st.ElapsedMilliseconds);
        }
    }
}
